"use client"

import { useState, useEffect, useRef } from "react"
import { motion, useScroll, useTransform } from "framer-motion"
import {
  Github,
  Linkedin,
  Twitter,
  Mail,
  Download,
  Code,
  ArrowRight,
  Sparkles,
  Zap,
  Rocket,
  Heart,
  Coffee,
  Globe,
  Smartphone,
  Database,
  Menu,
  X,
  Award,
  User,
  Briefcase,
  MessageCircle,
  Trophy,
  Target,
  Star,
  Clock,
  Calendar,
} from "lucide-react"
import { Button } from "@/components/ui/button"

export default function ModernPortfolio() {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  const [isLoaded, setIsLoaded] = useState(false)
  const [activeSection, setActiveSection] = useState("home")
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)

  const { scrollYProgress } = useScroll()
  const y = useTransform(scrollYProgress, [0, 1], [0, -50])
  const opacity = useTransform(scrollYProgress, [0, 0.3], [1, 0])

  // Refs for sections
  const homeRef = useRef<HTMLElement>(null)
  const aboutRef = useRef<HTMLElement>(null)
  const projectsRef = useRef<HTMLElement>(null)
  const achievementsRef = useRef<HTMLElement>(null)
  const contactRef = useRef<HTMLElement>(null)

  const navItems = [
    { id: "home", label: "Home", icon: <User className="w-4 h-4" />, ref: homeRef },
    { id: "about", label: "About", icon: <Target className="w-4 h-4" />, ref: aboutRef },
    { id: "projects", label: "Projects", icon: <Briefcase className="w-4 h-4" />, ref: projectsRef },
    { id: "achievements", label: "Achievements", icon: <Trophy className="w-4 h-4" />, ref: achievementsRef },
    { id: "contact", label: "Contact", icon: <MessageCircle className="w-4 h-4" />, ref: contactRef },
  ]

  const [showAllEducation, setShowAllEducation] = useState(false)
  const [showAllExperience, setShowAllExperience] = useState(false)
  const [showAllProjects, setShowAllProjects] = useState(false)
  const [showAllAchievements, setShowAllAchievements] = useState(false)
  const [selectedProject, setSelectedProject] = useState<any>(null)
  const [currentImageIndex, setCurrentImageIndex] = useState(0)

  useEffect(() => {
    setIsLoaded(true)
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY })
    }
    window.addEventListener("mousemove", handleMouseMove)

    // Intersection Observer for active section
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveSection(entry.target.id)
          }
        })
      },
      { threshold: 0.3 },
    )

    navItems.forEach((item) => {
      if (item.ref.current) {
        observer.observe(item.ref.current)
      }
    })

    return () => {
      window.removeEventListener("mousemove", handleMouseMove)
      observer.disconnect()
    }
  }, [])

  const scrollToSection = (sectionId: string) => {
    const section = navItems.find((item) => item.id === sectionId)?.ref.current
    if (section) {
      section.scrollIntoView({ behavior: "smooth" })
      setIsMobileMenuOpen(false)
    }
  }

  const projects = [
    {
      title: "TaskFlow Pro",
      tagline: "Collaborative project management with real-time magic ‚ú®",
      summary:
        "A full-stack web application that transforms team collaboration with real-time updates, intelligent task management, and beautiful analytics. Built to solve scattered project communication with an intuitive dashboard.",
      image: "/project-1.png",
      features: [
        "üöÄ Real-time WebSocket collaboration",
        "üéØ Drag-and-drop Kanban boards",
        "ü§ñ AI-powered task suggestions",
        "üìä Advanced analytics dashboard",
        "üì± Mobile-responsive design",
        "üîî Smart notifications system",
      ],
      techStack: {
        frontend: ["JavaScript", "HTML/CSS", "Chart.js"],
        backend: ["Flask", "Python"],
        database: ["MySQL"],
        tools: ["Git", "AWS", "Docker"],
      },
      liveUrl: "https://taskflow-pro.vercel.app",
      githubUrl: "https://github.com/username/taskflow-pro",
      learned: "Mastered WebSocket architecture and advanced Flask patterns for scalable real-time applications.",
      color: "from-blue-400 via-purple-500 to-pink-500",
      icon: <Globe className="w-6 h-6" />,
    },
    {
      title: "ExpenseTracker Mobile",
      tagline: "Smart expense tracking that learns from you üß†",
      summary:
        "Flutter mobile app with ML-powered categorization and beautiful analytics. Revolutionizes personal finance management with intelligent automation and stunning visualizations that adapt to user behavior.",
      image: "/project-2.png",
      features: [
        "üß† ML-powered expense categorization",
        "üì± Cross-platform Flutter architecture",
        "‚ö° Offline-first with smart sync",
        "üì∏ OCR receipt scanning",
        "üîÆ Predictive budget insights",
        "üí∞ Multi-currency support",
      ],
      techStack: {
        frontend: ["Flutter", "Dart"],
        backend: ["Django", "Python"],
        database: ["SQLite"],
        tools: ["Firebase", "Figma", "Git"],
      },
      liveUrl: "https://play.google.com/store/apps/expensetracker",
      githubUrl: "https://github.com/username/expense-tracker",
      learned: "Deep-dived into Flutter state management and implemented sophisticated offline-first architecture.",
      color: "from-green-400 via-emerald-500 to-teal-500",
      icon: <Smartphone className="w-6 h-6" />,
    },
    {
      title: "DevOps Pipeline Manager",
      tagline: "Orchestrate deployments like a symphony üéº",
      summary:
        "Comprehensive DevOps automation platform with intelligent monitoring and beautiful dashboards. Transforms complex deployment workflows into elegant, automated processes with enterprise-grade reliability.",
      image: "/project-3.png",
      features: [
        "üîÑ Automated CI/CD orchestration",
        "üìà Real-time pipeline monitoring",
        "üê≥ Docker & Jenkins integration",
        "üîç Intelligent error detection",
        "‚ö° Performance analytics",
        "üì¢ Smart notification system",
      ],
      techStack: {
        frontend: ["JavaScript", "HTML/CSS"],
        backend: ["Python", "Flask"],
        database: ["MySQL"],
        tools: ["Docker", "Jenkins", "AWS"],
      },
      liveUrl: "https://devops-manager.herokuapp.com",
      githubUrl: "https://github.com/username/devops-manager",
      learned: "Mastered containerization patterns and advanced CI/CD automation with enterprise-grade monitoring.",
      color: "from-orange-400 via-red-500 to-pink-500",
      icon: <Database className="w-6 h-6" />,
    },
  ]

  const allEducation = [
    {
      school: "Bulacan State University - Main",
      degree: "Bachelor of Science in Computer Engineering",
      period: "2024 - 2025",
      logo: "/bulsu.jpg",
      projects: ["GWA: 1.46"],
    },
    {
      school: "Sta. Lucia National High School",
      degree: "Science, Technology, Engineering, and Mathematics (STEM)",
      period: "2019 - 2021",
      logo: "/lucia.jpg",
      projects: ["Valedictorian", "with High Honor"],
    },
    {
      school: "Sta. Lucia National High School",
      degree: "Junior High",
      period: "2014 - 2019",
      logo: "/lucia.jpg",
      skills: ["with High Honor"],
    },
    {
      school: "Bulusan Elementary School",
      degree: "Elementary",
      period: "2008 - 2014",
      logo: "/bulusan.jpg",
      achievements: ["1st Honorable Mention"],
    },
  ]

  const allExperience = [
    {
      company: "Alied Care Experts (ACE) Malolos Doctors",
      position: "Database Administrator - IT Support",
      period: "June 2024 - July 2024",
      logo: "/ace.png",
      achievements: ["Intern"],
    },
    {
      company: "Alied Care Experts (ACE) Malolos Doctors",
      position: "Marketing Assistant - Graphic Designer",
      period: "August 2024 - October 2024",
      logo: "/ace.png",
      achievements: ["Part-time"],
    },
  ]

  const allAchievements = [
    {
      title: "Full Stack Development Certification",
      organization: "Tech Institute",
      date: "2023",
      description:
        "Comprehensive certification covering modern web technologies and best practices. Completed intensive 6-month program with hands-on projects.",
      icon: <Award className="w-6 h-6" />,
      color: "from-blue-400 to-purple-500",
      image: "/cert-fullstack.png",
      skills: ["React", "Node.js", "MongoDB", "AWS"],
    },
    {
      title: "Best Mobile App - University Hackathon",
      organization: "State University",
      date: "2023",
      description:
        "Won first place for innovative expense tracking app with ML integration. Competed against 50+ teams over 48 hours.",
      icon: <Trophy className="w-6 h-6" />,
      color: "from-yellow-400 to-orange-500",
      image: "/hackathon-trophy.png",
      prize: "$5,000 + Mentorship Program",
    },
    {
      title: "Open Source Contributor",
      organization: "GitHub",
      date: "2022-Present",
      description:
        "Active contributor to various open source projects with 50+ merged PRs. Contributed to popular libraries and frameworks.",
      icon: <Code className="w-6 h-6" />,
      color: "from-green-400 to-teal-500",
      image: "/github-contributions.png",
      contributions: ["React Router", "Express.js", "Material-UI"],
    },
    {
      title: "AWS Cloud Practitioner",
      organization: "Amazon Web Services",
      date: "2022",
      description:
        "Certified in cloud computing fundamentals and AWS services. Demonstrates knowledge of AWS Cloud concepts and services.",
      icon: <Sparkles className="w-6 h-6" />,
      color: "from-purple-400 to-pink-500",
      image: "/aws-cert.png",
      validUntil: "2025",
    },
    {
      title: "Dean's List Recognition",
      organization: "State University",
      date: "2021-2024",
      description:
        "Consistently maintained high academic performance throughout university career. Recognized for academic excellence each semester.",
      icon: <Award className="w-6 h-6" />,
      color: "from-indigo-400 to-purple-500",
      image: "/deans-list.png",
      gpa: "3.8/4.0",
    },
    {
      title: "JavaScript Algorithms Certification",
      organization: "FreeCodeCamp",
      date: "2021",
      description:
        "Completed comprehensive JavaScript algorithms and data structures curriculum. Solved 100+ coding challenges.",
      icon: <Code className="w-6 h-6" />,
      color: "from-yellow-400 to-red-500",
      image: "/js-cert.png",
      hours: "300+ hours",
    },
  ]

  // Add project images for carousel
  const projectImages = {
    0: ["/project-1-1.png", "/project-1-2.png", "/project-1-3.png"],
    1: ["/project-2-1.png", "/project-2-2.png", "/project-2-3.png"],
    2: ["/project-3-1.png", "/project-3-2.png", "/project-3-3.png"],
  }

  const skills = [
    { name: "Python", level: 90, color: "from-blue-400 to-blue-600" },
    { name: "JavaScript", level: 85, color: "from-yellow-400 to-orange-500" },
    { name: "React/Flutter", level: 80, color: "from-cyan-400 to-blue-500" },
    { name: "Flask/Django", level: 85, color: "from-green-400 to-emerald-600" },
    { name: "DevOps/AWS", level: 75, color: "from-purple-400 to-pink-500" },
    { name: "Database Design", level: 80, color: "from-indigo-400 to-purple-600" },
]

  const achievements = [
    {
      title: "Full Stack Development Certification",
      organization: "Tech Institute",
      date: "2023",
      description: "Comprehensive certification covering modern web technologies and best practices",
      icon: <Award className="w-6 h-6" />,
      color: "from-blue-400 to-purple-500",
    },
    {
      title: "Best Mobile App - University Hackathon",
      organization: "State University",
      date: "2023",
      description: "Won first place for innovative expense tracking app with ML integration",
      icon: <Trophy className="w-6 h-6" />,
      color: "from-yellow-400 to-orange-500",
    },
    {
      title: "Open Source Contributor",
      organization: "GitHub",
      date: "2022-Present",
      description: "Active contributor to various open source projects with 50+ merged PRs",
      icon: <Code className="w-6 h-6" />,
      color: "from-green-400 to-teal-500",
    },
    {
      title: "AWS Cloud Practitioner",
      organization: "Amazon Web Services",
      date: "2022",
      description: "Certified in cloud computing fundamentals and AWS services",
      icon: <Sparkles className="w-6 h-6" />,
      color: "from-purple-400 to-pink-500",
    },
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white overflow-hidden">
      {/* Navigation */}
      <motion.nav
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.8 }}
        className="fixed top-0 left-0 right-0 z-50 bg-black/20 backdrop-blur-md border-b border-white/10"
      >
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            {/* Logo */}
            <motion.div whileHover={{ scale: 1.05 }} className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Code className="w-6 h-6 text-white" />
              </div>
              <span className="text-xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                Portfolio
              </span>
            </motion.div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center gap-8">
              {navItems.map((item) => (
                <motion.button
                  key={item.id}
                  onClick={() => scrollToSection(item.id)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full transition-all duration-300 ${activeSection === item.id
                      ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg"
                      : "text-gray-300 hover:text-white hover:bg-white/10"
                    }`}
                >
                  {item.icon}
                  <span className="font-medium">{item.label}</span>
                </motion.button>
              ))}
            </div>

            {/* Mobile Menu Button */}
            <motion.button
              whileTap={{ scale: 0.95 }}
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="md:hidden w-10 h-10 bg-white/10 backdrop-blur-sm rounded-lg flex items-center justify-center border border-white/20"
            >
              {isMobileMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
            </motion.button>
          </div>

          {/* Mobile Navigation */}
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{
              opacity: isMobileMenuOpen ? 1 : 0,
              height: isMobileMenuOpen ? "auto" : 0,
            }}
            transition={{ duration: 0.3 }}
            className="md:hidden overflow-hidden"
          >
            <div className="py-4 space-y-2">
              {navItems.map((item) => (
                <motion.button
                  key={item.id}
                  onClick={() => scrollToSection(item.id)}
                  whileTap={{ scale: 0.95 }}
                  className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-all duration-300 ${activeSection === item.id
                      ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white"
                      : "text-gray-300 hover:text-white hover:bg-white/10"
                    }`}
                >
                  {item.icon}
                  <span className="font-medium">{item.label}</span>
                </motion.button>
              ))}
            </div>
          </motion.div>
        </div>
      </motion.nav>

      {/* Animated Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(120,119,198,0.1),transparent_50%)]" />

        {/* Floating Orbs */}
        <motion.div
          className="absolute w-96 h-96 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full blur-3xl"
          animate={{
            x: mousePosition.x / 10,
            y: mousePosition.y / 10,
          }}
          transition={{ type: "spring", damping: 30, stiffness: 50 }}
          style={{ left: "10%", top: "20%" }}
        />
        <motion.div
          className="absolute w-64 h-64 bg-gradient-to-r from-green-500/20 to-teal-500/20 rounded-full blur-3xl"
          animate={{
            x: -mousePosition.x / 15,
            y: -mousePosition.y / 15,
          }}
          transition={{ type: "spring", damping: 30, stiffness: 50 }}
          style={{ right: "10%", bottom: "20%" }}
        />
        <motion.div
          className="absolute w-48 h-48 bg-gradient-to-r from-pink-500/20 to-rose-500/20 rounded-full blur-3xl"
          animate={{
            x: mousePosition.x / 20,
            y: -mousePosition.y / 20,
          }}
          transition={{ type: "spring", damping: 30, stiffness: 50 }}
          style={{ left: "60%", top: "60%" }}
        />

        {/* Floating Particles */}
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-white/20 rounded-full"
            animate={{
              y: [0, -100, 0],
              opacity: [0, 1, 0],
            }}
            transition={{
              duration: 3 + Math.random() * 2,
              repeat: Number.POSITIVE_INFINITY,
              delay: Math.random() * 2,
            }}
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
          />
        ))}
      </div>

      {/* Home Section */}
      <motion.section
        ref={homeRef}
        id="home"
        className="relative min-h-screen flex items-center justify-center px-6 pt-20"
        style={{ y, opacity }}
      >
        <div className="max-w-7xl mx-auto grid lg:grid-cols-2 gap-16 items-center">
          {/* Profile Image */}
          <motion.div
            initial={{ scale: 0, rotate: -180 }}
            animate={{ scale: 1, rotate: 0 }}
            transition={{ duration: 1.2, type: "spring", bounce: 0.4 }}
            className="relative mx-auto lg:mx-0 order-2 lg:order-1"
          >
            <div className="relative w-96 h-96 mx-auto">
              {/* Animated Ring */}
              <motion.div
                className="absolute inset-0 rounded-full border-4 border-gradient-to-r from-blue-500 via-purple-500 to-pink-500"
                animate={{ rotate: 360 }}
                transition={{ duration: 20, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                style={{
                  background: "conic-gradient(from 0deg, #3b82f6, #8b5cf6, #ec4899, #3b82f6)",
                  padding: "4px",
                  borderRadius: "50%",
                }}
              >
                <div className="w-full h-full bg-slate-900 rounded-full" />
              </motion.div>

              {/* Pulsing Glow */}
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full blur-2xl opacity-50"
                animate={{ scale: [1, 1.1, 1] }}
                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}
              />

              {/* Profile Image */}
              <div className="relative w-full h-full rounded-full overflow-hidden border-4 border-white/20 backdrop-blur-sm z-10">
                <img src="/5R.JPG" alt="Professional Developer" className="w-full h-full object-cover" />
                <div className="absolute inset-0 bg-gradient-to-t from-purple-900/20 to-transparent" />
              </div>

              {/* Floating Icons */}
              <motion.div
                className="absolute -top-6 -right-6 w-16 h-16 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center shadow-2xl"
                animate={{
                  rotate: 360,
                  y: [0, -10, 0],
                }}
                transition={{
                  rotate: { duration: 8, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                  y: { duration: 2, repeat: Number.POSITIVE_INFINITY },
                }}
              >
                <Code className="w-8 h-8 text-white" />
              </motion.div>

              <motion.div
                className="absolute -bottom-4 -left-4 w-12 h-12 bg-gradient-to-r from-pink-400 to-red-500 rounded-full flex items-center justify-center shadow-2xl"
                animate={{
                  rotate: -360,
                  x: [0, 10, 0],
                }}
                transition={{
                  rotate: { duration: 6, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                  x: { duration: 3, repeat: Number.POSITIVE_INFINITY },
                }}
              >
                <Heart className="w-6 h-6 text-white" />
              </motion.div>

              <motion.div
                className="absolute top-1/2 -right-8 w-10 h-10 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center shadow-2xl"
                animate={{
                  rotate: 360,
                  scale: [1, 1.2, 1],
                }}
                transition={{
                  rotate: { duration: 4, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                  scale: { duration: 2, repeat: Number.POSITIVE_INFINITY },
                }}
              >
                <Zap className="w-5 h-5 text-white" />
              </motion.div>
            </div>
          </motion.div>

          {/* Hero Content */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.3 }}
            className="text-center lg:text-left space-y-8 order-1 lg:order-2"
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 }}
              className="inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-green-500/20 to-emerald-500/20 backdrop-blur-sm rounded-full border border-green-400/30"
            >
              <motion.div
                animate={{ scale: [1, 1.2, 1] }}
                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}
                className="w-3 h-3 bg-green-400 rounded-full"
              />
              <span className="text-green-300 font-medium">Available for opportunities</span>
              <Sparkles className="w-4 h-4 text-green-400" />
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.6 }}>
              <h1 className="text-6xl lg:text-8xl font-bold leading-tight">
                <span className="bg-gradient-to-r from-white via-blue-100 to-purple-200 bg-clip-text text-transparent">
                  Computer
                </span>
                <br />
                <span className="bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
                  Engineer
                </span>
              </h1>
              <motion.div
                className="flex items-center gap-2 mt-4 justify-center lg:justify-start"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 1 }}
              >
                <Coffee className="w-5 h-5 text-amber-400" />
                <span className="text-gray-400">Powered by coffee & curiosity</span>
              </motion.div>
            </motion.div>

            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.7 }}
              className="text-xl lg:text-2xl text-gray-300 max-w-2xl leading-relaxed"
            >
              Fresh Computer Engineering graduate passionate about clean code, creative problem-solving, and user-centered design. Willing to learn, explore new technologies, and build digital experiences that make a difference.
            </motion.p>

            {/* Skills Preview */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.8 }}
              className="flex flex-wrap gap-3 justify-center lg:justify-start"
            >
              {["Python", "JavaScript", "React", "Flutter", "AWS", "Docker"].map((skill, index) => (
                <motion.div
                  key={skill}
                  initial={{ opacity: 0, scale: 0 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.8 + index * 0.1 }}
                  whileHover={{ scale: 1.1, y: -2 }}
                  className="px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 text-sm font-medium"
                >
                  {skill}
                </motion.div>
              ))}
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.9 }}
              className="flex flex-wrap gap-6 justify-center lg:justify-start"
            >
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  size="lg"
                  onClick={() => scrollToSection("contact")}
                  className="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 text-white border-0 shadow-2xl text-lg px-8 py-4"
                >
                  <Mail className="w-5 h-5 mr-3" />
                  Let's Connect
                  <Rocket className="w-5 h-5 ml-3" />
                </Button>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  size="lg"
                  variant="outline"
                  className="border-white/30 text-white hover:bg-white/10 backdrop-blur-sm text-lg px-8 py-4 bg-transparent"
                >
                  <Download className="w-5 h-5 mr-3" />
                  Download CV
                </Button>
              </motion.div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1 }}
              className="flex gap-6 justify-center lg:justify-start"
            >
              {[
                { Icon: Github, href: "#", color: "from-gray-400 to-gray-600" },
                { Icon: Linkedin, href: "#", color: "from-blue-400 to-blue-600" },
                { Icon: Twitter, href: "#", color: "from-sky-400 to-blue-500" },
              ].map(({ Icon, href, color }, index) => (
                <motion.a
                  key={index}
                  href={href}
                  whileHover={{ scale: 1.2, y: -5 }}
                  whileTap={{ scale: 0.9 }}
                  className={`w-14 h-14 bg-gradient-to-r ${color} rounded-full flex items-center justify-center shadow-2xl hover:shadow-3xl transition-all duration-300`}
                >
                  <Icon className="w-6 h-6 text-white" />
                </motion.a>
              ))}
            </motion.div>
          </motion.div>
        </div>
      </motion.section>

      {/* About Section */}
      <motion.section
        ref={aboutRef}
        id="about"
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 1 }}
        viewport={{ once: true }}
        className="relative py-20 px-6"
      >
        <div className="max-w-6xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-5xl font-bold mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              About Me
            </h2>
            <p className="text-xl text-gray-400 max-w-3xl mx-auto">
              Get to know me better - my skills, background, and what drives my passion for development
            </p>
          </motion.div>

          {/* Soft Skills */}
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="mb-20"
          >
            <h3 className="text-3xl font-bold mb-8 text-center bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent">
              Soft Skills
            </h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[
                { name: "Problem Solving", icon: "üß©", description: "Creative approach to complex challenges" },
                { name: "Team Collaboration", icon: "ü§ù", description: "Effective communication and teamwork" },
                { name: "Leadership", icon: "üëë", description: "Guiding teams to achieve common goals" },
                { name: "Adaptability", icon: "üîÑ", description: "Quick learning and flexibility" },
                { name: "Critical Thinking", icon: "üéØ", description: "Analytical and strategic mindset" },
                { name: "Communication", icon: "üí¨", description: "Clear and effective expression" },
                { name: "Time Management", icon: "‚è∞", description: "Efficient project and deadline handling" },
                { name: "Creativity", icon: "üé®", description: "Innovative solutions and design thinking" },
              ].map((skill, index) => (
                <motion.div
                  key={skill.name}
                  initial={{ opacity: 0, scale: 0 }}
                  whileInView={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  whileHover={{ scale: 1.05, y: -5 }}
                  className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 hover:border-white/20 transition-all duration-300 text-center"
                >
                  <div className="text-4xl mb-4">{skill.icon}</div>
                  <h4 className="text-lg font-semibold text-white mb-2">{skill.name}</h4>
                  <p className="text-sm text-gray-400">{skill.description}</p>
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Introduction */}
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="mb-20"
          >
            <div className="bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm rounded-3xl p-8 border border-white/20">
              <h3 className="text-3xl font-bold mb-6 text-center bg-gradient-to-r from-green-400 to-teal-500 bg-clip-text text-transparent">
                Introduction
              </h3>
              <p className="text-lg text-gray-300 leading-relaxed text-center max-w-4xl mx-auto">
                I'm a passionate Full Stack Developer with a strong foundation in modern web technologies and mobile
                development. My journey in software development began during my university years, where I discovered my
                love for creating innovative solutions that solve real-world problems. I thrive in collaborative
                environments and am always eager to learn new technologies and methodologies. My goal is to build
                applications that not only function flawlessly but also provide exceptional user experiences.
              </p>
            </div>
          </motion.div>

          {/* Education & Experience */}
          <div className="grid lg:grid-cols-2 gap-12 mb-20">
            {/* Education */}
            <motion.div
              initial={{ opacity: 0, x: -50 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <h3 className="text-3xl font-bold mb-8 text-center bg-gradient-to-r from-purple-400 to-pink-500 bg-clip-text text-transparent">
                Education
              </h3>
              <div className="space-y-6">
                {(showAllEducation ? allEducation : allEducation.slice(0, 2)).map((edu, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02 }}
                    className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 hover:border-white/20 transition-all duration-300"
                  >
                    <div className="flex items-start gap-4">
                      <div className="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center">
                        <img
                          src={edu.logo || "/placeholder.svg?height=40&width=40&query=university logo"}
                          alt={edu.school}
                          className="w-10 h-10 object-contain"
                        />
                      </div>
                      <div className="flex-1">
                        <h4 className="text-xl font-bold text-white mb-1">{edu.degree}</h4>
                        <p className="text-purple-400 font-medium mb-2">{edu.school}</p>
                        <p className="text-gray-400 text-sm mb-2">{edu.period}</p>
                        <p className="text-gray-300 text-sm mb-3">{edu.description}</p>
                        {edu.gpa && <p className="text-green-400 text-sm font-medium">GPA: {edu.gpa}</p>}
                        {edu.achievements && (
                          <div className="flex flex-wrap gap-2 mt-2">
                            {edu.achievements.map((achievement, idx) => (
                              <span
                                key={idx}
                                className="px-2 py-1 bg-purple-500/20 text-purple-300 text-xs rounded-full"
                              >
                                {achievement}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowAllEducation(!showAllEducation)}
                  className="w-full py-3 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-xl border border-purple-400/30 text-purple-300 font-medium hover:border-purple-400/50 transition-all duration-300"
                >
                  {showAllEducation ? "Show Less" : "View All Education"}
                </motion.button>
              </div>
            </motion.div>

            {/* Experience */}
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <h3 className="text-3xl font-bold mb-8 text-center bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent">
                Experience
              </h3>
              <div className="space-y-6">
                {(showAllExperience ? allExperience : allExperience.slice(0, 1)).map((exp, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02 }}
                    className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 hover:border-white/20 transition-all duration-300"
                  >
                    <div className="flex items-start gap-4">
                      <div className="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center">
                        <img
                          src={exp.logo || "/placeholder.svg?height=40&width=40&query=company logo"}
                          alt={exp.company}
                          className="w-10 h-10 object-contain"
                        />
                      </div>
                      <div className="flex-1">
                        <h4 className="text-xl font-bold text-white mb-1">{exp.position}</h4>
                        <p className="text-orange-400 font-medium mb-2">{exp.company}</p>
                        <p className="text-gray-400 text-sm mb-2">{exp.period}</p>
                        <p className="text-gray-300 text-sm mb-3">{exp.description}</p>
                        {showAllExperience && exp.responsibilities && (
                          <div className="mb-3">
                            <h5 className="text-white font-medium mb-2">Key Responsibilities:</h5>
                            <ul className="text-gray-300 text-sm space-y-1">
                              {exp.responsibilities.map((resp, idx) => (
                                <li key={idx} className="flex items-start gap-2">
                                  <span className="text-orange-400 mt-1">‚Ä¢</span>
                                  <span>{resp}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                        {exp.achievements && (
                          <div className="flex flex-wrap gap-2 mt-2">
                            {exp.achievements.map((achievement, idx) => (
                              <span
                                key={idx}
                                className="px-2 py-1 bg-orange-500/20 text-orange-300 text-xs rounded-full"
                              >
                                {achievement}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowAllExperience(!showAllExperience)}
                  className="w-full py-3 bg-gradient-to-r from-orange-500/20 to-red-500/20 backdrop-blur-sm rounded-xl border border-orange-400/30 text-orange-300 font-medium hover:border-orange-400/50 transition-all duration-300"
                >
                  {showAllExperience ? "Show Less" : "View All Experience"}
                </motion.button>
              </div>
            </motion.div>
          </div>

          {/* Technical Skills */}
          <motion.div
  initial={{ opacity: 0, y: 50 }}
  whileInView={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.8 }}
  viewport={{ once: true }}
>
  <h3 className="text-3xl font-bold mb-8 text-center bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent">
    Technical Skills
  </h3>

  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
    {[
      {
        title: "Programming Languages",
        color: "from-blue-500 via-purple-500 to-pink-500",
        skills: ["Python", "C++", "Java"],
      },
      {
        title: "Tools and Platforms",
        color: "from-blue-500 via-purple-500 to-pink-500",
        skills: ["GitHub", "Git"],
      },
      {
        title: "Databases",
        color: "from-green-400 to-emerald-500",
        skills: ["MySQL"],
      },
      {
        title: "Web Frameworks",
        color: "from-blue-500 via-purple-500 to-pink-500",
        skills: ["HTML", "CSS", "JavaScript", "FlutterFlow"],
      },
      {
        title: "Core Concepts",
        color: "from-yellow-400 to-orange-500",
        skills: ["Object Oriented Programming", "Data Structure", "Agile Methodology", "CI/CD"],
      },
    ].map((category, index) => (
      <motion.div
        key={index}
        whileHover={{ scale: 1.03, y: -5 }}
        className={`bg-white/5 border border-white/10 backdrop-blur-sm rounded-2xl p-6 transition-all duration-300 shadow-lg hover:shadow-xl`}
      >
        <h4
          className={`text-xl font-semibold text-white mb-4 bg-gradient-to-r ${category.color} bg-clip-text text-transparent`}
        >
          {category.title}
        </h4>
        <div className="flex flex-wrap gap-3">
          {category.skills.map((skill, idx) => (
            <motion.span
              key={idx}
              whileHover={{ scale: 1.1, y: -2 }}
              className="px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 text-sm text-white font-medium shadow-sm hover:bg-white/20 transition"
            >
              {skill}
            </motion.span>
          ))}
        </div>
      </motion.div>
    ))}
  </div>
</motion.div>
</div>
      </motion.section>



      {/* Projects Section */}
      <section ref={projectsRef} id="projects" className="relative py-20 px-6">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-20"
          >
            <motion.div
              initial={{ scale: 0 }}
              whileInView={{ scale: 1 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-full border border-purple-400/30 mb-6"
            >
              <Sparkles className="w-5 h-5 text-purple-400" />
              <span className="text-purple-300 font-medium">Featured Work</span>
            </motion.div>
            <h2 className="text-6xl font-bold mb-8 bg-gradient-to-r from-white via-purple-100 to-pink-100 bg-clip-text text-transparent">
              My Projects
            </h2>
            <p className="text-xl text-gray-400 max-w-4xl mx-auto leading-relaxed">
              A collection of innovative solutions that blend cutting-edge technology with exceptional user experience.
            </p>
          </motion.div>
          {/* Project Grid Preview */}
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
            {projects.map((project, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 50 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
                whileHover={{ scale: 1.02, y: -10 }}
                className="group cursor-pointer"
              >
                <div className="bg-white/5 backdrop-blur-sm rounded-2xl overflow-hidden border border-white/10 hover:border-white/20 transition-all duration-300">
                  <div className="relative h-48 overflow-hidden">
                    <img
                      src={project.image || "/placeholder.svg?height=200&width=400&query=modern web application"}
                      alt={project.title}
                      className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" />
                    <motion.div
                      className={`absolute top-4 right-4 w-12 h-12 bg-gradient-to-r ${project.color} rounded-xl flex items-center justify-center shadow-lg`}
                      whileHover={{ rotate: 360 }}
                      transition={{ duration: 0.6 }}
                    >
                      {project.icon}
                    </motion.div>
                  </div>
                  <div className="p-6">
                    <h3 className="text-xl font-bold text-white mb-2">{project.title}</h3>
                    <p
                      className={`text-sm font-medium bg-gradient-to-r ${project.color} bg-clip-text text-transparent mb-3`}
                    >
                      {project.tagline}
                    </p>
                    <p className="text-gray-400 text-sm line-clamp-3">{project.summary}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
          <div className="text-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowAllProjects(true)}
              className="px-8 py-4 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-xl border border-purple-400/30 text-purple-300 font-medium hover:border-purple-400/50 transition-all duration-300"
            >
              <Briefcase className="w-5 h-5 mr-3 inline" />
              View All Projects
            </motion.button>
          </div>
        </div>
      </section>
      {/* Achievements Section */}
      <motion.section
        ref={achievementsRef}
        id="achievements"
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 1 }}
        viewport={{ once: true }}
        className="relative py-20 px-6"
      >
        <div className="max-w-6xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <motion.div
              initial={{ scale: 0 }}
              whileInView={{ scale: 1 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 backdrop-blur-sm rounded-full border border-yellow-400/30 mb-6"
            >
              <Trophy className="w-5 h-5 text-yellow-400" />
              <span className="text-yellow-300 font-medium">Recognition</span>
            </motion.div>
            <h2 className="text-5xl font-bold mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              Achievements & Certifications
            </h2>
            <p className="text-xl text-gray-400 max-w-3xl mx-auto">
              Milestones and recognitions that showcase my commitment to excellence
            </p>
          </motion.div>
          <div className="grid md:grid-cols-2 gap-8 mb-12">
            {achievements.slice(0, 4).map((achievement, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 50 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
                whileHover={{ scale: 1.02, y: -5 }}
                className="relative group"
              >
                <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-8 border border-white/10 hover:border-white/20 transition-all duration-300 h-full">
                  <div className="flex items-start gap-4 mb-4">
                    <motion.div
                      className={`w-16 h-16 bg-gradient-to-r ${achievement.color} rounded-2xl flex items-center justify-center shadow-lg`}
                      whileHover={{ rotate: 360 }}
                      transition={{ duration: 0.6 }}
                    >
                      {achievement.icon}
                    </motion.div>
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-white mb-2">{achievement.title}</h3>
                      <p className="text-gray-400 text-sm mb-1">{achievement.organization}</p>
                      <p className="text-gray-500 text-sm">{achievement.date}</p>
                    </div>
                  </div>
                  <p className="text-gray-300 leading-relaxed">{achievement.description}</p>
                </div>
              </motion.div>
            ))}
          </div>
          <div className="text-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowAllAchievements(true)}
              className="px-8 py-4 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 backdrop-blur-sm rounded-xl border border-yellow-400/30 text-yellow-300 font-medium hover:border-yellow-400/50 transition-all duration-300"
            >
              <Trophy className="w-5 h-5 mr-3 inline" />
              View All Achievements
            </motion.button>
          </div>
        </div>
      </motion.section>
      {/* Contact Section */}
      <motion.section
        ref={contactRef}
        id="contact"
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 1 }}
        viewport={{ once: true }}
        className="relative py-32 px-6"
      >
        <div className="max-w-5xl mx-auto text-center">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            whileInView={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="relative"
          >
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 via-purple-500/20 to-pink-500/20 rounded-3xl blur-3xl" />
            <div className="relative bg-white/5 backdrop-blur-sm rounded-3xl border border-white/20 p-16 shadow-2xl">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                viewport={{ once: true }}
                className="inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-green-500/20 to-emerald-500/20 backdrop-blur-sm rounded-full border border-green-400/30 mb-8"
              >
                <Rocket className="w-5 h-5 text-green-400" />
                <span className="text-green-300 font-medium">Ready to collaborate</span>
              </motion.div>
              <motion.h2
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                viewport={{ once: true }}
                className="text-5xl lg:text-6xl font-bold mb-8 bg-gradient-to-r from-white via-blue-100 to-purple-200 bg-clip-text text-transparent"
              >
                Let's Build Something
                <br />
                <span className="bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
                  Extraordinary Together
                </span>
              </motion.h2>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                viewport={{ once: true }}
                className="text-xl lg:text-2xl text-gray-300 mb-12 max-w-3xl mx-auto leading-relaxed"
              >
                Ready to turn your innovative ideas into reality? Let's discuss your next project and create something
                that makes a lasting impact.
              </motion.p>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 }}
                viewport={{ once: true }}
                className="flex flex-wrap gap-6 justify-center"
              >
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    size="lg"
                    className="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 text-white border-0 shadow-2xl text-xl px-12 py-6"
                  >
                    <Mail className="w-6 h-6 mr-4" />
                    Get In Touch
                    <ArrowRight className="w-6 h-6 ml-4" />
                  </Button>
                </motion.div>
              </motion.div>
              {/* Contact Methods */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6 }}
                viewport={{ once: true }}
                className="mt-12 flex flex-wrap gap-8 justify-center"
              >
                {[
                  {
                    icon: <Mail className="w-6 h-6" />,
                    label: "Email",
                    value: "hello@developer.com",
                    color: "from-blue-400 to-blue-600",
                  },
                  {
                    icon: <Linkedin className="w-6 h-6" />,
                    label: "LinkedIn",
                    value: "/in/developer",
                    color: "from-blue-500 to-blue-700",
                  },
                  {
                    icon: <Github className="w-6 h-6" />,
                    label: "GitHub",
                    value: "@developer",
                    color: "from-gray-400 to-gray-600",
                  },
                ].map((contact, index) => (
                  <motion.div
                    key={contact.label}
                    whileHover={{ scale: 1.05, y: -5 }}
                    className="flex items-center gap-3 px-6 py-4 bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 hover:border-white/20 transition-all duration-300"
                  >
                    <div
                      className={`w-12 h-12 bg-gradient-to-r ${contact.color} rounded-lg flex items-center justify-center`}
                    >
                      {contact.icon}
                    </div>
                    <div>
                      <p className="text-white font-medium">{contact.label}</p>
                      <p className="text-gray-400 text-sm">{contact.value}</p>
                    </div>
                  </motion.div>
                ))}
              </motion.div>
            </div>
          </motion.div>
        </div>
      </motion.section>
      {/* Education Modal */}
      {showAllEducation && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={() => setShowAllEducation(false)}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-slate-900 via-purple-900/50 to-slate-900 rounded-3xl border border-white/20 max-w-6xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-8">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h2 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-500 bg-clip-text text-transparent mb-2">
                    My Education Journey
                  </h2>
                  <p className="text-gray-400">Complete Academic Background</p>
                </div>
                <button
                  onClick={() => setShowAllEducation(false)}
                  className="w-12 h-12 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors border border-white/20"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              <div className="space-y-8">
                {allEducation.map((edu, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -50 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02 }}
                    className="bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/10 hover:border-purple-400/30 transition-all duration-300"
                  >
                    <div className="flex flex-row-reverse items-start gap-6">
  {/* Right Side: Logo */}
  <div className="w-40 h-40 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl flex items-center justify-center border border-purple-400/30">
    <img
      src={edu.logo || "/placeholder.svg?height=160&width=160&query=university logo"}
      alt={edu.school}
      className="w-32 h-32 object-contain"

    />
  </div>

  {/* Left Side: All Education Info */}
  <div className="flex-1">
    <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between mb-4">
      <div>
        <h3 className="text-2xl font-bold text-white mb-2">{edu.degree}</h3>
        <p className="text-purple-400 font-semibold text-lg mb-1">{edu.school}</p>
        <p className="text-gray-400 font-medium">{edu.period}</p>
      </div>
      {edu.gpa && (
        <div className="mt-4 lg:mt-0 px-4 py-2 bg-green-500/20 rounded-full border border-green-400/30">
          <p className="text-green-400 font-bold">GPA: {edu.gpa}</p>
        </div>
      )}
    </div>
    <p className="text-gray-300 leading-relaxed mb-6">{edu.description}</p>
    {edu.certification && (
      <div className="mb-4">
        <h4 className="text-white font-semibold mb-3">Achievements:</h4>
        <div className="flex flex-wrap gap-2">
          {edu.skills.map((skill, idx) => (
            <span
              key={idx}
              className="px-3 py-1 bg-yellow-500/20 text-yellow-300 text-sm rounded-full border border-yellow-400/30 flex items-center gap-2"
            >
              <Trophy className="w-3 h-3" />
              {skill}
            </span>
          ))}
        </div>
      </div>
    )}
    {edu.skills && (
      <div className="mb-4">
        <h4 className="text-white font-semibold mb-3">Achievements:</h4>
        <div className="flex flex-wrap gap-2">
          {edu.skills.map((skill, idx) => (
            <span
              key={idx}
              className="px-3 py-1 bg-yellow-500/20 text-yellow-300 text-sm rounded-full border border-yellow-400/30 flex items-center gap-2"
            >
              <Trophy className="w-3 h-3" />
              {skill}
            </span>
          ))}
        </div>
      </div>
    )}
    {edu.projects && (
      <div className="mb-4">
        <h4 className="text-white font-semibold mb-3">Achievements:</h4>
        <div className="flex flex-wrap gap-2">
          {edu.projects.map((project, idx) => (
            <span
              key={idx}
              className="px-3 py-1 bg-yellow-500/20 text-yellow-300 text-sm rounded-full border border-yellow-400/30 flex items-center gap-2"
            >
              <Trophy className="w-3 h-3" />
              {project}
            </span>
          ))}
        </div>
      </div>
    )}
    {edu.achievements && (
      <div>
        <h4 className="text-white font-semibold mb-3">Achievements:</h4>
        <div className="flex flex-wrap gap-2">
          {edu.achievements.map((achievement, idx) => (
            <span
              key={idx}
              className="px-3 py-1 bg-yellow-500/20 text-yellow-300 text-sm rounded-full border border-yellow-400/30 flex items-center gap-2"
            >
              <Trophy className="w-3 h-3" />
              {achievement}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
      {/* Experience Modal */}
      {showAllExperience && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={() => setShowAllExperience(false)}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-slate-900 via-orange-900/30 to-slate-900 rounded-3xl border border-white/20 max-w-6xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-8">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h2 className="text-4xl font-bold bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent mb-2">
                    Professional Experience
                  </h2>
                  <p className="text-gray-400">My career journey and professional growth</p>
                </div>
                <button
                  onClick={() => setShowAllExperience(false)}
                  className="w-12 h-12 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors border border-white/20"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              <div className="space-y-8">
                {allExperience.map((exp, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: 50 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02 }}
                    className="bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/10 hover:border-orange-400/30 transition-all duration-300"
                  >
                    <div className="flex items-start gap-6">
                      <div className="w-20 h-20 bg-gradient-to-r from-orange-500/20 to-red-500/20 rounded-2xl flex items-center justify-center border border-orange-400/30">
                        <img
                          src={exp.logo || "/placeholder.svg?height=50&width=50&query=company logo"}
                          alt={exp.company}
                          className="w-12 h-12 object-contain"
                        />
                      </div>
                      <div className="flex-1">
                        <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between mb-4">
                          <div>
                            <h3 className="text-2xl font-bold text-white mb-2">{exp.position}</h3>
                            <p className="text-orange-400 font-semibold text-lg mb-1">{exp.company}</p>
                            <p className="text-gray-400 font-medium">{exp.period}</p>
                          </div>
                          <div className="mt-4 lg:mt-0 px-4 py-2 bg-orange-500/20 rounded-full border border-orange-400/30">
                            <p className="text-orange-300 font-medium text-sm">
                              {exp.period.includes("Present") ? "Current Role" : "Completed"}
                            </p>
                          </div>
                        </div>
                        <p className="text-gray-300 leading-relaxed mb-6">{exp.description}</p>
                        {exp.responsibilities && (
                          <div className="mb-6">
                            <h4 className="text-white font-semibold mb-4 flex items-center gap-2">
                              <Briefcase className="w-5 h-5 text-orange-400" />
                              Key Responsibilities
                            </h4>
                            <ul className="space-y-3">
                              {exp.responsibilities.map((resp, idx) => (
                                <li key={idx} className="flex items-start gap-3 text-gray-300">
                                  <div className="w-2 h-2 bg-gradient-to-r from-orange-400 to-red-500 rounded-full mt-2 flex-shrink-0" />
                                  <span className="leading-relaxed">{resp}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                        {exp.achievements && (
                          <div>
                            <h4 className="text-white font-semibold mb-3 flex items-center gap-2">
                              <Award className="w-5 h-5 text-yellow-400" />
                              Role
                            </h4>
                            <div className="flex flex-wrap gap-2">
                              {exp.achievements.map((achievement, idx) => (
                                <span
                                  key={idx}
                                  className="px-3 py-2 bg-yellow-500/20 text-yellow-300 text-sm rounded-full border border-yellow-400/30 flex items-center gap-2"
                                >
                                  <Star className="w-3 h-3" />
                                  {achievement}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
      {/* Projects Modal */}
      {showAllProjects && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={(e) => {
            // Only close if clicking the background, not if a project detail is opening
            if (!selectedProject) {
              setShowAllProjects(false)
            }
          }}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-slate-900 via-purple-900/30 to-slate-900 rounded-3xl border border-white/20 max-w-6xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-8">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h2 className="text-4xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-blue-500 bg-clip-text text-transparent mb-2">
                    All Projects
                  </h2>
                  <p className="text-gray-400">Click on any project to view details</p>
                </div>
                <button
                  onClick={() => setShowAllProjects(false)}
                  className="w-12 h-12 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors border border-white/20"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                {projects.map((project, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.05, y: -10 }}
                    className="bg-white/5 backdrop-blur-sm rounded-2xl overflow-hidden border border-white/10 hover:border-white/30 transition-all duration-300 cursor-pointer group"
                    onClick={(e) => {
                      e.stopPropagation()
                      console.log("Project clicked:", project.title) // Debug line
                      setSelectedProject(project)
                      setCurrentImageIndex(0)
                    }}
                  >
                    <div className="relative h-64 overflow-hidden">
                      <img
                        src={project.image || "/placeholder.svg?height=300&width=400&query=modern web application"}
                        alt={project.title}
                        className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent" />
                      <motion.div
                        className={`absolute top-4 right-4 w-12 h-12 bg-gradient-to-r ${project.color} rounded-xl flex items-center justify-center shadow-lg`}
                        whileHover={{ rotate: 360, scale: 1.1 }}
                        transition={{ duration: 0.6 }}
                      >
                        {project.icon}
                      </motion.div>
                      <div className="absolute bottom-0 left-0 right-0 p-6">
                        <h3 className="text-2xl font-bold text-white mb-2">{project.title}</h3>
                        <p className="text-gray-300 text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                          Click to view details ‚Üí
                        </p>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
      {/* Project Detail Modal - Enhanced with Image Carousel */}
      {selectedProject && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/95 backdrop-blur-sm z-[70] flex items-center justify-center p-4 overflow-hidden"
          onClick={() => {
            setSelectedProject(null)
            setCurrentImageIndex(0) // Reset image index when closing
          }}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 rounded-3xl border border-white/20 max-w-7xl w-full h-[90vh] shadow-2xl flex flex-col relative"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header with Close Button */}
            <div className="flex items-center justify-between p-6 border-b border-white/10 flex-shrink-0">
              <div>
                <h1 className="text-3xl font-bold text-white mb-1">{selectedProject.title}</h1>
                <p
                  className={`text-lg font-medium bg-gradient-to-r ${selectedProject.color} bg-clip-text text-transparent`}
                >
                  {selectedProject.tagline}
                </p>
              </div>
              <button
                onClick={() => {
                  setSelectedProject(null)
                  setCurrentImageIndex(0) // Reset image index when closing
                }}
                className="w-12 h-12 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors border border-white/20 flex-shrink-0"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            {/* Main Content - No Scroll */}
            <div className="flex-1 p-6 grid lg:grid-cols-2 gap-6 overflow-hidden min-h-0">
              {/* Left Column - Images */}
              <div className="space-y-4 flex flex-col">
                {/* Image Carousel */}
                <div className="relative flex-shrink-0">
                  <div className="relative h-64 rounded-2xl overflow-hidden bg-gradient-to-br from-gray-800 to-gray-900">
                    <img
                      src={
                        projectImages[projects.indexOf(selectedProject)]?.[currentImageIndex] ||
                        selectedProject.image ||
                        "/placeholder.svg?height=300&width=500&query=project screenshot" ||
                        "/placeholder.svg"
                      }
                      alt={`${selectedProject.title} screenshot ${currentImageIndex + 1}`}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
                    {/* Always show navigation arrows if there are multiple images */}
                    {projectImages[projects.indexOf(selectedProject)] &&
                      projectImages[projects.indexOf(selectedProject)].length > 1 && (
                        <>
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              setCurrentImageIndex(
                                currentImageIndex === 0
                                  ? projectImages[projects.indexOf(selectedProject)].length - 1
                                  : currentImageIndex - 1,
                              )
                            }}
                            className="absolute left-3 top-1/2 -translate-y-1/2 w-12 h-12 bg-black/70 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-black/90 transition-colors border border-white/30 shadow-lg"
                          >
                            <ArrowRight className="w-6 h-6 rotate-180 text-white" />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              setCurrentImageIndex(
                                currentImageIndex === projectImages[projects.indexOf(selectedProject)].length - 1
                                  ? 0
                                  : currentImageIndex + 1,
                              )
                            }}
                            className="absolute right-3 top-1/2 -translate-y-1/2 w-12 h-12 bg-black/70 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-black/90 transition-colors border border-white/30 shadow-lg"
                          >
                            <ArrowRight className="w-6 h-6 text-white" />
                          </button>
                        </>
                      )}
                    {/* Image counter overlay */}
                    {projectImages[projects.indexOf(selectedProject)] &&
                      projectImages[projects.indexOf(selectedProject)].length > 1 && (
                        <div className="absolute top-4 left-4 px-3 py-1 bg-black/70 backdrop-blur-sm rounded-full border border-white/30">
                          <span className="text-white text-sm font-medium">
                            {currentImageIndex + 1} / {projectImages[projects.indexOf(selectedProject)].length}
                          </span>
                        </div>
                      )}
                  </div>
                  {/* Image Indicators */}
                  {projectImages[projects.indexOf(selectedProject)] &&
                    projectImages[projects.indexOf(selectedProject)].length > 1 && (
                      <div className="flex justify-center gap-2 mt-3">
                        {projectImages[projects.indexOf(selectedProject)].map((_, index) => (
                          <button
                            key={index}
                            onClick={(e) => {
                              e.stopPropagation()
                              setCurrentImageIndex(index)
                            }}
                            className={`w-3 h-3 rounded-full transition-all duration-300 ${currentImageIndex === index
                                ? `bg-gradient-to-r ${selectedProject.color}`
                                : "bg-white/40 hover:bg-white/60"
                              }`}
                          />
                        ))}
                      </div>
                    )}
                  {/* Navigation buttons below image */}
                  {projectImages[projects.indexOf(selectedProject)] &&
                    projectImages[projects.indexOf(selectedProject)].length > 1 && (
                      <div className="flex justify-between items-center mt-4">
                        <button
                          onClick={(e) => {
                            e.stopPropagation()
                            setCurrentImageIndex(
                              currentImageIndex === 0
                                ? projectImages[projects.indexOf(selectedProject)].length - 1
                                : currentImageIndex - 1,
                            )
                          }}
                          className="flex items-center gap-2 px-4 py-2 bg-white/10 backdrop-blur-sm rounded-lg border border-white/20 hover:bg-white/20 transition-colors text-white text-sm"
                        >
                          <ArrowRight className="w-4 h-4 rotate-180" />
                          Previous
                        </button>
                        <span className="text-gray-400 text-sm">
                          Image {currentImageIndex + 1} of {projectImages[projects.indexOf(selectedProject)].length}
                        </span>
                        <button
                          onClick={(e) => {
                            e.stopPropagation()
                            setCurrentImageIndex(
                              currentImageIndex === projectImages[projects.indexOf(selectedProject)].length - 1
                                ? 0
                                : currentImageIndex + 1,
                            )
                          }}
                          className="flex items-center gap-2 px-4 py-2 bg-white/10 backdrop-blur-sm rounded-lg border border-white/20 hover:bg-white/20 transition-colors text-white text-sm"
                        >
                          Next
                          <ArrowRight className="w-4 h-4" />
                        </button>
                      </div>
                    )}
                </div>
                {/* Action Buttons */}
                <div className="space-y-3 flex-shrink-0">
                  <Button
                    size="lg"
                    className={`w-full bg-gradient-to-r ${selectedProject.color} hover:opacity-90 text-white border-0`}
                    asChild
                  >
                    <a href={selectedProject.liveUrl} target="_blank" rel="noopener noreferrer">
                      <Globe className="w-5 h-5 mr-2" />
                      View Live Demo
                      <ArrowRight className="w-5 h-5 ml-2" />
                    </a>
                  </Button>
                  <Button
                    size="lg"
                    variant="outline"
                    className="w-full border-white/30 text-white hover:bg-white/10 bg-transparent"
                    asChild
                  >
                    <a href={selectedProject.githubUrl} target="_blank" rel="noopener noreferrer">
                      <Github className="w-5 h-5 mr-2" />
                      View Source Code
                    </a>
                  </Button>
                </div>
              </div>
              {/* Right Column - Project Information */}
              <div className="space-y-4 overflow-y-auto min-h-0 pr-2">
                {/* Project Definition */}
                <div>
                  <h2 className="text-xl font-bold text-white mb-3 flex items-center gap-2">
                    <div
                      className={`w-6 h-6 bg-gradient-to-r ${selectedProject.color} rounded-lg flex items-center justify-center`}
                    >
                      <Target className="w-4 h-4 text-white" />
                    </div>
                    Project Definition
                  </h2>
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
                    <p className="text-gray-300 leading-relaxed">{selectedProject.summary}</p>
                  </div>
                </div>
                {/* Tech Used */}
                <div>
                  <h2 className="text-xl font-bold text-white mb-3 flex items-center gap-2">
                    <div
                      className={`w-6 h-6 bg-gradient-to-r ${selectedProject.color} rounded-lg flex items-center justify-center`}
                    >
                      <Code className="w-4 h-4 text-white" />
                    </div>
                    Tech Used
                  </h2>
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10 space-y-3">
                    <div>
                      <h3 className="text-white font-medium mb-2">Frontend</h3>
                      <div className="flex flex-wrap gap-1">
                        {selectedProject.techStack.frontend.map((tech, idx) => (
                          <span
                            key={idx}
                            className={`px-2 py-1 bg-gradient-to-r ${selectedProject.color} text-white text-xs rounded-full`}
                          >
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                    <div>
                      <h3 className="text-white font-medium mb-2">Backend</h3>
                      <div className="flex flex-wrap gap-1">
                        {selectedProject.techStack.backend.map((tech, idx) => (
                          <span
                            key={idx}
                            className={`px-2 py-1 bg-gradient-to-r ${selectedProject.color} text-white text-xs rounded-full`}
                          >
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                    <div>
                      <h3 className="text-white font-medium mb-2">Database & Tools</h3>
                      <div className="flex flex-wrap gap-1">
                        {[...selectedProject.techStack.database, ...selectedProject.techStack.tools].map(
                          (tech, idx) => (
                            <span
                              key={idx}
                              className={`px-2 py-1 bg-gradient-to-r ${selectedProject.color} text-white text-xs rounded-full`}
                            >
                              {tech}
                            </span>
                          ),
                        )}
                      </div>
                    </div>
                  </div>
                </div>
                {/* Key Features */}
                <div>
                  <h2 className="text-xl font-bold text-white mb-3 flex items-center gap-2">
                    <div
                      className={`w-6 h-6 bg-gradient-to-r ${selectedProject.color} rounded-lg flex items-center justify-center`}
                    >
                      <Sparkles className="w-4 h-4 text-white" />
                    </div>
                    Key Features
                  </h2>
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
                    <div className="grid grid-cols-1 gap-2">
                      {selectedProject.features.map((feature, idx) => (
                        <div
                          key={idx}
                          className="flex items-start gap-2 p-2 rounded-lg bg-white/5 border border-white/10"
                        >
                          <div
                            className={`w-2 h-2 rounded-full bg-gradient-to-r ${selectedProject.color} mt-2 flex-shrink-0`}
                          />
                          <span className="text-gray-300 text-sm leading-relaxed">{feature}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
                {/* Key Learning */}
                <div>
                  <h2 className="text-xl font-bold text-white mb-3 flex items-center gap-2">
                    <div
                      className={`w-6 h-6 bg-gradient-to-r ${selectedProject.color} rounded-lg flex items-center justify-center`}
                    >
                      <Award className="w-4 h-4 text-white" />
                    </div>
                    Key Learning
                  </h2>
                  <div className="bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                    <p className="text-gray-300 italic leading-relaxed text-sm">{selectedProject.learned}</p>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
      {/* Achievements Modal */}
      {showAllAchievements && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={() => setShowAllAchievements(false)}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-slate-900 via-yellow-900/20 to-slate-900 rounded-3xl border border-white/20 max-w-6xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-8">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h2 className="text-4xl font-bold bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 bg-clip-text text-transparent mb-2">
                    Achievements & Certifications
                  </h2>
                  <p className="text-gray-400">Recognition and milestones in my professional journey</p>
                </div>
                <button
                  onClick={() => setShowAllAchievements(false)}
                  className="w-12 h-12 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors border border-white/20"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              <div className="grid md:grid-cols-2 gap-8">
                {allAchievements.map((achievement, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02, y: -5 }}
                    className="bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/10 hover:border-yellow-400/30 transition-all duration-300"
                  >
                    <div className="flex items-start gap-6 mb-6">
                      <motion.div
                        className={`w-20 h-20 bg-gradient-to-r ${achievement.color} rounded-2xl flex items-center justify-center shadow-lg border border-white/20`}
                        whileHover={{ rotate: 360, scale: 1.1 }}
                        transition={{ duration: 0.6 }}
                      >
                        {achievement.icon}
                      </motion.div>
                      <div className="flex-1">
                        <h3 className="text-2xl font-bold text-white mb-2">{achievement.title}</h3>
                        <p className="text-yellow-400 font-semibold text-lg mb-1">{achievement.organization}</p>
                        <p className="text-gray-400 font-medium">{achievement.date}</p>
                      </div>
                    </div>
                    <p className="text-gray-300 leading-relaxed mb-6">{achievement.description}</p>
                    {achievement.image && (
                      <div className="mb-6">
                        <img
                          src={achievement.image || "/placeholder.svg?height=200&width=400&query=certificate"}
                          alt={achievement.title}
                          className="w-full h-32 object-cover rounded-xl border border-white/20"
                        />
                      </div>
                    )}
                    <div className="space-y-4">
                      {achievement.skills && (
                        <div>
                          <h4 className="text-white font-semibold mb-3">Skills Covered:</h4>
                          <div className="flex flex-wrap gap-2">
                            {achievement.skills.map((skill, idx) => (
                              <span
                                key={idx}
                                className={`px-3 py-1 bg-gradient-to-r ${achievement.color} bg-opacity-20 text-sm rounded-full border border-white/20`}
                              >
                                {skill}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                      {achievement.contributions && (
                        <div>
                          <h4 className="text-white font-semibold mb-3">Contributions:</h4>
                          <div className="flex flex-wrap gap-2">
                            {achievement.contributions.map((contrib, idx) => (
                              <span
                                key={idx}
                                className="px-3 py-1 bg-green-500/20 text-green-300 text-sm rounded-full border border-green-400/30"
                              >
                                {contrib}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                      <div className="flex flex-wrap gap-4 pt-4 border-t border-white/10">
                        {achievement.prize && (
                          <div className="flex items-center gap-2">
                            <Trophy className="w-4 h-4 text-yellow-400" />
                            <span className="text-yellow-400 font-medium text-sm">Prize: {achievement.prize}</span>
                          </div>
                        )}
                        {achievement.gpa && (
                          <div className="flex items-center gap-2">
                            <Award className="w-4 h-4 text-blue-400" />
                            <span className="text-blue-400 font-medium text-sm">GPA: {achievement.gpa}</span>
                          </div>
                        )}
                        {achievement.validUntil && (
                          <div className="flex items-center gap-2">
                            <Calendar className="w-4 h-4 text-green-400" />
                            <span className="text-green-400 font-medium text-sm">
                              Valid until: {achievement.validUntil}
                            </span>
                          </div>
                        )}
                        {achievement.hours && (
                          <div className="flex items-center gap-2">
                            <Clock className="w-4 h-4 text-purple-400" />
                            <span className="text-purple-400 font-medium text-sm">{achievement.hours}</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  )
}
